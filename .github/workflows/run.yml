name: Build geosite files
on:
  workflow_dispatch:
#  schedule:
#    - cron: "0 19 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
          repo: dl123100/clash-geosite

      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "APPLE_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Apple.list" >> $GITHUB_ENV
          echo "GOOGLE_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Google.list" >> $GITHUB_ENV
          echo "CN_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/CN.list" >> $GITHUB_ENV
          echo "DIRECT_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Direct.list" >> $GITHUB_ENV
          echo "IP_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/IP.list" >> $GITHUB_ENV
          echo "GOOGLECN_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/GoogleDirect.list" >> $GITHUB_ENV
          echo "PROXY_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Proxy.list" >> $GITHUB_ENV
          echo "AI_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/AI.list" >> $GITHUB_ENV
          echo "BING_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Bing.list" >> $GITHUB_ENV
          echo "MS_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Microsoft.list" >> $GITHUB_ENV
          echo "AD_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/AD.list" >> $GITHUB_ENV
          echo "STREAMING_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Streaming.list" >> $GITHUB_ENV
          echo "TG_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Telegram.list" >> $GITHUB_ENV
          echo "SOCIALMEDIA_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/SocialMedia.list" >> $GITHUB_ENV
          echo "HTTPDNS_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/HTTPDNS.list" >> $GITHUB_ENV
          echo "YOUTUBE_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Youtube.list" >> $GITHUB_ENV
          echo "TIKTOK_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Tiktok.list" >> $GITHUB_ENV
          echo "ST_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/SpeedTest.list" >> $GITHUB_ENV
          echo "TRACKER_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/Tracker.list" >> $GITHUB_ENV
          echo "DNS_URL=https://raw.githubusercontent.com/dl123100/clash-geosite/master/rule-files/DNS.list" >> $GITHUB_ENV
        shell: bash

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum

      - name: Generate apple
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          mkdir -p ./community/mydata
          curl -sSL $APPLE_URL | ${{ env.SED }} > ./community/mydata/apple

      - name: Generate microsoft
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $MS_URL | ${{ env.SED }} > ./community/mydata/microsoft

      - name: Generate cn
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $CN_URL | ${{ env.SED }} > ./community/mydata/cn
          
      - name: Generate direct
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          mkdir -p ./community/mydata
          curl -sSL $DIRECT_URL | ${{ env.SED }} > ./community/mydata/direct
          
      - name: Generate googlecn
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          mkdir -p ./community/mydata
          curl -sSL $GOOGLECN_URL | ${{ env.SED }} > ./community/mydata/googlecn

      - name: Generate proxy
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $PROXY_URL | ${{ env.SED }} > ./community/mydata/proxy
          
      - name: Generate google
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $GOOGLE_URL | ${{ env.SED }} > ./community/mydata/google
          
      - name: Generate ai
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $AI_URL | ${{ env.SED }} > ./community/mydata/ai
          
      - name: Generate bing
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $BING_URL | ${{ env.SED }} > ./community/mydata/bing

      - name: Generate ip
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $IP_URL | ${{ env.SED }} > ./community/mydata/ip
          
      - name: Generate ad
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $AD_URL | ${{ env.SED }} > ./community/mydata/ad

      - name: Generate streaming
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $STREAMING_URL | ${{ env.SED }} > ./community/mydata/streaming

      - name: Generate telegram
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $TG_URL | ${{ env.SED }} > ./community/mydata/telegram

      - name: Generate socialmedia
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $SOCIALMEDIA_URL | ${{ env.SED }} > ./community/mydata/socialmedia

      - name: Generate httpdns
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $HTTPDNS_URL | ${{ env.SED }} > ./community/mydata/httpdns

      - name: Generate youtube
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $YOUTUBE_URL | ${{ env.SED }} > ./community/mydata/youtube

      - name: Generate tiktok
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $TIKTOK_URL | ${{ env.SED }} > ./community/mydata/tiktok

      - name: Generate speedtest
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $ST_URL | ${{ env.SED }} > ./community/mydata/speedtest

      - name: Generate tracker
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $TRACKER_URL | ${{ env.SED }} > ./community/mydata/tracker

      - name: Generate dns
        env:
          SED: sed '/^\s*#/d' | sed '/^PROCESS-NAME,/d' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d' | sed '/^\s*IP-CIDR6/d'
        run: |
          curl -sSL $DNS_URL | ${{ env.SED }} > ./community/mydata/dns

      - name: Build geosite.dat file
        run: |
          cd community || exit 1
          go run ./ --datapath=./mydata --outputname GeoSite.dat
          cp -fpPR ./mydata ./publish

      - name: Move files
        run: |
          rm -rf ./tmp
          install -Dp ./community/GeoSite.dat ./publish/GeoSite.dat
          install -Dp ./community/mydata/apple ./publish/apple.txt
          install -Dp ./community/mydata/cn ./publish/cn.txt
          install -Dp ./community/mydata/direct ./publish/direct.txt
          install -Dp ./community/mydata/googlecn ./publish/googlecn.txt
          install -Dp ./community/mydata/proxy ./publish/proxy.txt
          install -Dp ./community/mydata/google ./publish/google.txt
          install -Dp ./community/mydata/ai ./publish/ai.txt
          install -Dp ./community/mydata/bing ./publish/bing.txt
          install -Dp ./community/mydata/ip ./publish/ip.txt
          install -Dp ./community/mydata/ad ./publish/ad.txt
          install -Dp ./community/mydata/microsoft ./publish/microsoft.txt
          install -Dp ./community/mydata/streaming ./publish/streaming.txt
          install -Dp ./community/mydata/telegram ./publish/telegram.txt
          install -Dp ./community/mydata/socialmedia ./publish/socialmedia.txt
          install -Dp ./community/mydata/httpdns ./publish/httpdns.txt
          install -Dp ./community/mydata/youtube ./publish/youtube.txt
          install -Dp ./community/mydata/tiktok ./publish/tiktok.txt
          install -Dp ./community/mydata/tracker ./publish/tracker.txt
          cd ./publish || exit 1

      - name: Release and upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: latest
          tag: latest
          file_glob: true
          file: ./publish/*

      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsdelivr CDN
        run: |
          cd publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
